<style>

.review-principle {
  padding-top: 80px;
}
.review-principle .bg-img{
  position: absolute;
  top: 15%;
  margin-left: -10%;
}
.review-principle .review-principle-p {
  font-size: 16px;
  color: #000;
  line-height: 1.5;
  max-width: 675px;
  margin: 0 auto;
  margin-top: 35px;
  text-align: center;
}

.review-principle .space-holder {
  position: relative;
  width: 100%;
  z-index:2;
}

.review-principle .sticky {
  position: sticky;
  top: 80px;
  height: calc(100vh - 80px);
  width: 100%;
  overflow: hidden;
  z-index: 1;
  display: flex;
  flex-direction: column;
}

.review-principle .horizontal {
  /* position: absolute; */
  flex: 1;
  height: 100%;
  will-change: transform;
  overflow: hidden;
  position: relative;
}
/* .review-principle .horizontal::before {
  position: absolute;
  content: '';
  display: block;
  padding-top: 100%;
  width: 160%;
  left: 50%;
  transform: translateX(-50%);
  top: calc(40% - 60px);
  border: 2px dashed #eee;
  z-index: 1;
  border-radius: 50%;
} */

.review-principle .cards {
  position: relative;
  /* height: 100%; */
  padding-left: calc(50vw - 200px);
  display: flex;
  justify-content: flex-start;
  padding-top: 7%;
  z-index: 2;
}

.review-principle .cards::before {
  position: absolute;
  content: '';
  display: block;
  /* height: 100%; */
  padding-top: 300%;
  width: 300%;
  left: 50%;
  transform: translateX(-50%);
  top: calc(50% + 60px);
  border: 2px dashed #eee;
  z-index: 0;
  border-radius: 50%;
}

.review-principle .sample-card {
  position: relative;
  margin-right: 35px;
  flex-shrink: 0;
  transition: transform 0.2s ease;
}

.review-principle .card-cont {
  width: 400px;
  background-color: #f9f9f9;
  padding: 20px;
  padding-bottom: 50px;
  height: 100%;
}

.review-principle .card-num {
  font-size: 43px;
  color: #000;
  font-family: var(--heading-font-family);
  line-height: 1;
}

.review-principle .sample-card .img {
  display: block;
  width: 77.77%;
  margin: 0 auto;
}

.review-principle .card-p {
  font-size: 14px;
  text-align: center;
  color: #000;
  margin-top: 35px;
}

.review-principle .review-principle-arraw {
  display: flex;
  justify-content: center;
  margin-top: 40px;
}

.review-principle .review-principle-arraw-item {
  background: #000;
  width: 45px;
  height: 45px;
  border-radius: 50%;
  position: relative;
  cursor: pointer;
  transition: all .4s ease;
  margin-right: 40px;
  border: 2px solid #000;
}
.review-principle .review-principle-arraw-item:last-child{
  margin-right: 0;
}

.review-principle .review-principle-arraw-item:hover {
  background: #fff;
}

.review-principle .review-principle-arraw-item::before {
  position: absolute;
  content: '';
  display: block;
  width: 12px;
  height: 12px;
  border-top: 2px solid #fff;
  border-left: 2px solid #fff;
  top: 50%;
  left: 50%;
  margin-left: 2px;
  transform: translate(-50% , -50%) rotate(-45deg);
  transition: all .4s ease;
}

.review-principle .review-principle-arraw-item:hover::before {
  border-color: #000;
}

.review-principle .review-principle-arraw-item:last-child {
  transform: scale(-1,-1);
}
.review-principle .review-principle-tips{
  position: relative;
  margin-top: 100px;
}

.review-principle .review-principle-tips .img-rotate{
  display: block;
  margin: 0 auto;
  width: 200px;
  animation: img-rotate 6s linear infinite;
  opacity: 0;
}

.review-principle .review-principle-tips .arrow_msk{
  position: absolute;
  display: block;
  left: 50%;
  top: 50%;
  width: 40px;
  height: 44px;
  transform: translate(-50%,-50%);
  overflow: hidden;
}

.review-principle .review-principle-tips .img-arraw{
  position: absolute;
  top: 0;
  left: 0;
  width: 30px;
  transform: translateZ(0);
  margin-left: 5px;
}

.review-principle .review-principle-tips .img-arraw:first-child{
  animation: img-translate1 1s linear infinite;
}
 
.review-principle .review-principle-tips .img-arraw:last-child{
  transform: translate3d(0,-200%,0);
  animation: img-translate 1s linear infinite;
}
@keyframes img-rotate {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

@keyframes img-translate {
  0% {
    transform: translate3d(0,-200%,0);
    opacity: 0;
  }
  100% {
    transform: translate3d(0,0%,0);
    opacity: 1;
  }
}

@keyframes img-translate1 {
  0% {
    transform: translate3d(0,0,0);
    opacity: 1;
  }
  100% {
    transform: translate3d(0,200%,0);
    opacity: 0;
  }
}
  
@media (max-width:1920px) {
  .review-principle .horizontal::before{
    top: calc(50% - 60px);
  }
}

@media (max-width:1600px) {
  .review-principle .card-cont{
    width: 335px;
  }
}

@media (max-width:1500px) {
  
  .review-principle .cards{
    padding-top: 60px;
  }
  .review-principle .horizontal::before{
    top: calc(40% - 60px);
  }
}

@media (max-width:1300px) {
  .review-principle .sample-card {
    margin-right: 55px;
  }
}

@media (max-width:991px) {
  .review-principle{
    padding-top: 60px;
  }
  .review-principle .bg-img{
    display:none;
  }
  .review-principle .sticky{
    top: 100px;
    height: calc(100vh - 100px);
  }
  .review-principle .card-cont{
    width: 242px;
    padding-bottom: 30px;
  }
  .review-principle .horizontal::before{
    width: 350%;
    padding-top: 300%;
    top: 30%;
  }
  .review-principle .cards {
    padding-left: calc(50vw - 121px);
    padding-top: 60px;
  }
  .review-principle .card-num{
    font-size: 28px;
  }
  .review-principle .sample-card{
    margin-right: 10px;
  }
  .review-principle .card-p{
    margin-top: 25px;
  }
  .review-principle .cards::before {
    top: calc(50% - 30px);
  }
  .review-principle .review-principle-tips{
    margin-top: 60px;
    zoom: .6;
  }
}
</style>
<section class="section-box">
  <div class="review-principle">
  <div class="space-holder">
    <div class="container">
      <div class="review-text">
        <div class="title-diy to-top">{{ section.settings.title }}</div>
        <div class="review-principle-p to-top" style="transition-delay: 0.1s">{{ section.settings.text }}</div>
      </div>
    </div>
    <div class="sticky">
      <div class="horizontal to-top">
        {%- if section.settings.image != blank -%}
         <img loading="lazy" class="bg-img" width="{{ section.settings.image.width }}" height="{{ section.settings.image.height }}" {% render 'image-attributes', image: section.settings.image %} alt="{{ section.settings.image.alt | escape }}" >
      {%- endif -%}
        <section role="feed" class="cards">
          {%- for block in section.blocks -%}
            <article class="sample-card">
              <div class="card-cont to-top" style="transition-delay: 0.1s">
                <div class="card-num">{{ block.settings.text }}</div>
                {%- if block.settings.image != blank -%}
                   <img loading="lazy" class="img" width="{{ block.settings.image.width }}" height="{{ block.settings.image.height }}" {% render 'image-attributes', image: block.settings.image %} alt="{{ block.settings.image.alt | escape }}" >
                {%- endif -%}
                <div class="card-p">{{ block.settings.text1 }}</div>
              </div>
            </article>
          {%- endfor -%}
        </section>
        <div class="review-principle-tips">
          <img src="https://cdn.shopify.com/s/files/1/0656/9079/6273/files/f1_e1636eb7-c1eb-46dd-b6b4-db91be41ef5f.png" alt="" class="img-rotate">
          <div class="arrow_msk">
            <img src="https://cdn.shopify.com/s/files/1/0656/9079/6273/files/f2_deeb87cf-c138-460c-ab66-f636df5c3a59.png" alt="" class="img-arraw">
            <img src="https://cdn.shopify.com/s/files/1/0656/9079/6273/files/f2_deeb87cf-c138-460c-ab66-f636df5c3a59.png" alt="" class="img-arraw">
          </div>
        </div>
      </div>
      
    </div>
  </div>
</div>
  
</section>
<script>
  class CustomSlider {
      constructor(containerElement) {
        this.container = containerElement;
        this.cards = this.container.querySelectorAll(".sample-card");
        this.sticky = document.querySelector('.sticky');
        this.spaceHolder = document.querySelector('.space-holder');
        this.horizontal = document.querySelector('.horizontal');
        this.reviewText = document.querySelector('.review-text')
        this.constraints = null;
        this.position = 0;
        this.namespace = "custom-slider-namespace";
      }

      enable() {
        window.addEventListener("scroll", this.handleScroll.bind(this));
        window.addEventListener("resize." + this.namespace, this.updateConstraints.bind(this));
        this.updateConstraints();
        this.spaceHolder.style.height = `${this.calcDynamicHeight(this.horizontal)}px`;
      }

      calcDynamicHeight(ref) {
        const vw = this.sticky.clientWidth;
        const vh = this.sticky.clientHeight;
        const objectWidth = ref.scrollWidth;
        return objectWidth - vw + vh + this.cards[0].getBoundingClientRect().width/2+(this.constraints.mobile ?1000:2000);
      }

      reset() {
          this.cards.forEach(card => card.style.transform = "");
      }

      updateConstraints() {
          this.reset();
          const cards = this.cards;
          this.constraints = {
              mobile: window.innerWidth <= 768,
              width: window.innerWidth,
              cardDiff: cards[1].getBoundingClientRect().left - cards[0].getBoundingClientRect().left
          };
          this.update(null, {
              position: this.position
          });
      }

      handleScroll() {
      const scrollAmount = this.sticky.offsetTop - this.reviewText.clientHeight;
      this.position = scrollAmount / (this.spaceHolder.offsetHeight - this.reviewText.clientHeight - this.sticky.scrollHeight);
      this.update(null, {
        position: this.position
      });
      }

      update() {
          const cards = this.cards;
          const constraints = this.constraints;
          const numCards = cards.length;
          const ratio1 = constraints.mobile ? 2.5 : 1.15;
          const ratio2 = constraints.mobile ? 0.6 : 1;
          const width = constraints.width * ratio1;
          const angle = Math.atan(constraints.cardDiff / constraints.width) * ratio2;

          for (let i = 0; i < numCards; i++) {
              const card = cards[i];
              const relativePosition = i - this.position * (numCards - 1);
              const offset = constraints.cardDiff * i;
              const translation = relativePosition * angle;
              const x = width * Math.sin(translation) - offset;
              const y = width - width * Math.cos(translation);
              card.style.transform = `translate(${x}px, ${y}px) rotate(${translation}rad)`;
          }
      }
  }

  const containerElement = document.querySelector('.sticky');
  const customSlider = new CustomSlider(containerElement);
    customSlider.enable();
</script>
{% schema %}
{
"name": "review-principle",
"blocks": [
  {
    "name": "item",
    "type": "item",
    "settings": [
      {
        "type": "image_picker",
        "id": "image",
        "label": "Image"
      },
      {
        "type": "text",
        "id": "text",
        "label": "Text"
      },
      {
        "type": "text",
        "id": "text1",
        "label": "Text"
      }
    ]
  }
],
"settings": [
    {
      "type": "image_picker",
      "id": "image",
      "label": "Background Image"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Title"
    },
    {
      "type": "text",
      "id": "text",
      "label": "Text"
    }
],
  "presets": [
  {
    "name": "review-principle",
    "blocks": []
  }
]
}
{% endschema %}