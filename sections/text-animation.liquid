<style>
  .text-animation{
    padding: 182px 0;
    background: #FFF;
    position: relative;
    z-index: 1;
  }
  
  .text-animation .text-animation-cont{
    max-width: 1000px;
    margin: 0 auto;
    color: rgba(0, 0, 0, 0.20);
    font-size: 50px;
    font-weight: 400;
    line-height: 1.3;
    text-align: center;
  }
  
  .text-animation .text-animation-cont span{
    color: rgba(0, 0, 0, 0.20);
    background-clip: text;
    background-size: var(--num-backgroundSize) 100%;
    background-repeat: no-repeat;
    background-image: linear-gradient(90deg, #E0004D, #E0004D);
  }
  
  @media (max-width:991px) {
    .text-animation{
      padding: 90px 0;
    }
    .text-animation .text-animation-cont{
      font-size: 28px;
    }
  }

</style>

<section>
  <div class="text-animation to-top">
    <div class="container">
      <div class="text-animation-cont" style="--num-backgroundSize:0%;">
        <span>
          {{ section.settings.text | escape }}
        </span>
      </div>
    </div>
  </div>
</section>
<script>
  function handleScroll() {
    let textElement = document.querySelector('.text-animation-cont');
    let scrollPosition = window.scrollY;
    let windowHeight = window.innerHeight;
    let reat = textElement.getBoundingClientRect()
    let scrollThresholdStart = windowHeight * 0.2; // 设置动画开始的滚动位置为页面高度的 20%
    let scrollThresholdEnd = windowHeight * 0.8; // 设置动画结束的滚动位置为页面高度的 80%
    // 根据滚动位置计算背景大小
    let backgroundSize = (1 - (reat.top - windowHeight * 0.2) / (windowHeight * 0.6)) * 100;

    // 如果滚动位置在阈值范围内，则显示文本并设置背景大小
    if (reat.top >= scrollThresholdStart && reat.top <= scrollThresholdEnd) {
      textElement.style = '--num-backgroundSize:' + backgroundSize + '%'
    }
    if (reat.top < scrollThresholdStart) {
      textElement.style = '--num-backgroundSize:100%'
    }
    if (reat.top > scrollThresholdEnd) {
      textElement.style = '--num-backgroundSize:0%'
    }
  }

  // 监听滚动事件
  window.addEventListener('scroll', handleScroll);

  // 页面加载完成时触发一次滚动事件，以确保初始状态正确
  window.addEventListener('load', handleScroll);
</script>
{% schema %}
{
  "name": "text-animation",
  "settings": [
    {
      "type": "text",
      "id": "text",
      "label": "Text"
    }
  ],
  "blocks": [
  ],
  "presets": [
    {
      "name": "text-animation"
    }
  ]
}
{% endschema %}