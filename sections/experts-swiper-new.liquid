<style>
.experts-swiper {
  padding-top: 70px;
  border-bottom: 1px solid #c2c2c2;
  color:#000;
}

.experts-swiper .experts-swiper-title {
  font-size: 60px;
  font-family: var(--heading-font-family);
  line-height: 1;
  text-align: center;
  padding-bottom: 70px;
  border-bottom: 1px solid #c2c2c2;
}

.experts-swiper .container {
  max-width: 1680px;
}

.experts-swiper .experts-swiper-cont {
  display: flex;
}

.experts-swiper .experts-swiper-left {
  width: 31.25%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  gap: 30px;
  border-right: 1px solid #c2c2c2;
  padding: 110px 30px 60px 0;
}

.experts-swiper .experts-swiper-hide {
  width: 100%;
  max-width: 300px;
  overflow: hidden;
  border-radius: 0 0 50% 50%;
}

.experts-swiper .experts-swiper-img {
  display: flex;
}

.experts-swiper .experts-swiper-img-item {
  width: 100%;
  flex-shrink: 0;
}

.experts-swiper .experts-swiper-img-item .img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.experts-swiper .experts-swiper-dot {
  display: flex;
  justify-content: center;
  width: 100%;
  max-width: 300px;
  gap: 20px;
}

.experts-swiper .experts-swiper-dot-item {
  width: 50px;
  height: 50px;
  position: relative;
  filter: grayscale(100%);
  cursor: pointer;
}

.experts-swiper .experts-swiper-dot-item img{
  border-radius: 0 0 50% 50%;
}

.experts-swiper .experts-swiper-dot-item.active{
  filter: grayscale(0%);
}
  
.experts-swiper .experts-swiper-right {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  flex: 1;
  padding: 110px 0 60px 150px;
  overflow: hidden;
}

.experts-swiper .experts-swiper-thide {
  overflow: hidden;
}

.experts-swiper .experts-swiper-text {
  display: flex;
  flex: 1;
}

.experts-swiper .experts-swiper-item {
  width: 100%;
  flex-shrink: 0;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  gap: 20px;
}

.experts-swiper .experts-swiper-txt {
  font-size: 35px;
  line-height: 1.2;
}

.experts-swiper .experts-swiper-name {
  font-size: 25px;
  line-height: 1.2;
}

.experts-swiper .experts-swiper-p {
  font-size: 18px;
  color: #737577;
  line-height: 1.2;
}

.experts-swiper .experts-swiper-arraw {
  display: flex;
  gap: 40px;
  margin-top: 70px;
}

.experts-swiper .experts-swiper-arraw-item {
  cursor: pointer;
  transition: all 0.4s ease;
  opacity: 0.3;
}

.experts-swiper .experts-swiper-arraw-item:hover {
  opacity: 1;
}

.experts-swiper .experts-swiper-arraw-item svg {
  display: block;
  max-width: 100%;
}

.men-diy.experts-swiper {
  background:#000;
  border-color:#3d3d3d;
  color:#fff;
}
.men-diy .experts-swiper-title,
.men-diy .experts-swiper-left{
  border-color:#3d3d3d;
}
.men-diy .experts-swiper-p{
  color:#929292;
}
.men-diy .experts-swiper-arraw-item path{
  fill:#fff;
}

.bf-2024 .experts-swiper-title {
  color:transparent;
  background: linear-gradient(90deg, #FFF3D4 0%, #FFE2AB 20%);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

.bf-2024 .experts-swiper-txt,
.bf-2024 .experts-swiper-name{
  color:#fff;
}

.bf-2024 .experts-swiper-arraw-item path{
  fill:#fff;
}
.bf-2024.experts-swiper,
.bf-2024 .experts-swiper-title,
.bf-2024 .experts-swiper-left{
  border-color:#696969;
}
  .bf-2024.experts-swiper{
    background:#000;
  }

.chr-2024.experts-swiper,
.chr-2024 .experts-swiper-title,
.chr-2024 .experts-swiper-left{
  border-color:#d6d9e1;
}
.chr-2024.experts-swiper{
  padding-bottom:0;
}

.val-2025.experts-swiper,
.val-2025 .experts-swiper-title,
.val-2025 .experts-swiper-left{
  border-color:#000;
}
@media (max-width: 1400px) {
  .experts-swiper .experts-swiper-left {
    padding: 80px 30px 60px 0;
  }
  .experts-swiper .experts-swiper-right {
    padding: 80px 0 60px 100px;
  }
}

@media (max-width: 991px) {
  .experts-swiper {
    padding-top: 40px;
  }
  .experts-swiper .experts-swiper-title {
    font-size: 28px;
    padding-bottom: 40px;
  }
  .experts-swiper .experts-swiper-txt {
    font-size: 20px;
  }
  .experts-swiper .experts-swiper-name {
    font-size: 16px;
  }
  .experts-swiper .experts-swiper-p {
    font-size: 14px;
  }
  .experts-swiper .experts-swiper-left {
    padding: 40px 30px 40px 0;
  }
  .experts-swiper .experts-swiper-right {
    padding: 40px 0 40px 30px;
  }
  .experts-swiper .experts-swiper-arraw {
    margin-top: 30px;
  }
  .experts-swiper .experts-swiper-arraw-item {
    width: 25px;
  }
  .experts-swiper .experts-swiper-dot-item {
    width:40px;
    height:40px;
  }
}

@media (max-width: 640px) {
  .experts-swiper .experts-swiper-cont {
    flex-direction: column;
  }

  .experts-swiper .experts-swiper-left {
    border: 0;
    width: 100%;
    align-items: center;
    padding: 30px 0;
    gap: 20px;
    border-bottom: 1px solid #c2c2c2;
  }
  .experts-swiper .experts-swiper-hide {
    max-width: 400px;
  }
  .experts-swiper .experts-swiper-dot {
    gap: 10px;
  }
  .experts-swiper .experts-swiper-right {
    padding-left: 0;
    padding-top: 30px;
  }
  .experts-swiper .experts-swiper-arraw {
    justify-content: center;
    gap: 20px;
  }
}
</style>
<section class="section-box">
  <div class="experts-swiper to-top {{ section.settings.text1 }}">
    <div class="experts-swiper-title">
      <div class="container">
        {{ section.settings.text }}
      </div>
    </div>
    <div class="container">
      <div class="experts-swiper-cont">
        <div class="experts-swiper-left">
          <div class="experts-swiper-hide">
            <div class="experts-swiper-img">
              {%- for block in section.blocks -%}
                <div class="experts-swiper-img-item">
                  {%- if block.settings.image != blank -%}
                    <img loading="lazy" class="img" width="{{ block.settings.image.width }}" height="{{ block.settings.image.height }}" {% render 'image-attributes', image: block.settings.image %} alt="{{ block.settings.image.alt | escape }}" >
                  {%- endif -%}
                </div>
              {%- endfor -%}              
            </div>
          </div>
          <div class="experts-swiper-dot">
            {%- for block in section.blocks -%}
              <div class="experts-swiper-dot-item {% if forloop.index == 1 %}active{% endif %}">
                {%- if block.settings.image != blank -%}
                    <img loading="lazy" class="img" width="" height="" {% render 'image-attributes', image: block.settings.image %} alt="{{ block.settings.image.alt | escape }}" >
                  {%- endif -%}
              </div>
            {%- endfor -%}  
          </div>
        </div>
        <div class="experts-swiper-right">
          <div class="experts-swiper-thide">
            <div class="experts-swiper-text">
              {%- for block in section.blocks -%}
                <div class="experts-swiper-item">
                  <div class="experts-swiper-txt">
                    {{ block.settings.text }}
                  </div>
                  <div>
                    <div class="experts-swiper-name">{{ block.settings.text1 }}</div>
                    <div class="experts-swiper-p">{{ block.settings.text2 }}</div>
                  </div>
                </div>
              {%- endfor -%}  
            </div>
          </div>
          <div class="experts-swiper-arraw">
            <div class="experts-swiper-arraw-item">
              <svg xmlns="http://www.w3.org/2000/svg" width="30" height="23" viewBox="0 0 30 23" fill="none">
                <g clip-path="url(#clip0_3763_1290)">
                  <path
                    d="M1.90735e-06 11.4929C1.90735e-06 11.6744 0.067318 11.8544 0.196098 11.992L10.44 22.9676L11.5098 21.9695L2.41463 12.2246H30C30 11.4168 29.3444 10.7612 28.5366 10.7612H0.765366C0.488781 10.7612 0.219515 10.9003 0.0878067 11.1446C0.0278072 11.2544 1.90735e-06 11.3744 1.90735e-06 11.4929Z"
                    fill="#190A0A" />
                  <path
                    d="M1.53073 8.92781C2.10292 9.49854 3.02926 9.49854 3.59999 8.92781L11.4937 1.03561L10.459 0.000976562L1.53219 8.92781H1.53073Z"
                    fill="#190A0A" />
                </g>
                <defs>
                  <clipPath id="clip0_3763_1290">
                    <rect width="30" height="22.9683" fill="white" transform="matrix(-1 0 0 1 30 0.000976562)" />
                  </clipPath>
                </defs>
              </svg>
            </div>
            <div class="experts-swiper-arraw-item">
              <svg xmlns="http://www.w3.org/2000/svg" width="30" height="23" viewBox="0 0 30 23" fill="none">
                <g clip-path="url(#clip0_3763_1286)">
                  <path
                    d="M30 11.4929C30 11.6744 29.9327 11.8544 29.8039 11.992L19.56 22.9676L18.4902 21.9695L27.5854 12.2246H0C0 11.4168 0.65561 10.7612 1.46341 10.7612H29.2346C29.5112 10.7612 29.7805 10.9003 29.9122 11.1446C29.9722 11.2544 30 11.3744 30 11.4929Z"
                    fill="#190A0A" />
                  <path
                    d="M28.4693 8.92781C27.8971 9.49854 26.9707 9.49854 26.4 8.92781L18.5063 1.03561L19.541 0.000976562L28.4678 8.92781H28.4693Z"
                    fill="#190A0A" />
                </g>
                <defs>
                  <clipPath id="clip0_3763_1286">
                    <rect width="30" height="22.9683" fill="white" transform="translate(0 0.000976562)" />
                  </clipPath>
                </defs>
              </svg>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>
<script>
  window.addEventListener('load', function () {
    function expertsSwiper() {
      let $p = $('.experts-swiper')
      let $img = $p.find('.experts-swiper-img')
      let $text = $p.find('.experts-swiper-text')
      let $arraw = $p.find('.experts-swiper-arraw-item')
      let $dot = $p.find('.experts-swiper-dot-item')
      let content = document.querySelector('.experts-swiper .experts-swiper-cont')
      let imgW = $img.find('.experts-swiper-img-item').width()
      let textW = $text.width()
      let index = 0
      let timer = null
      let date = +new Date()
      $dot.eq(index).addClass('active')
      $text.find('.experts-swiper-item').eq(index).addClass('active')
      function changeSwiper() {
        $img.css({
          transform: 'translateX(-' + index * imgW + 'px)',
          transition: ' all .4s ease',
        });
        $text.css({
          transform: 'translateX(-' + index * textW + 'px)',
          transition: ' all .4s ease',
        });
        $dot.removeClass('active').eq(index).addClass('active')
      }

      function changeIndex(sindex) {
        date = +new Date()
        clearInterval(timer)
        index += sindex ? 1 : -1
        if (index >= $dot.length) index = 0
        if (index < 0) index = $dot.length - 1
        changeSwiper()
        timer = setInterval(function () {
          index++
          if (index >= $dot.length) index = 0
          changeSwiper()
        }, 8 * 1000)
      }

      $dot.on('click', function () {
        let sindex = $(this).index()
        date = +new Date()
        clearInterval(timer)
        index = sindex
        changeSwiper()
        timer = setInterval(function () {
          index++
          if (index >= $dot.length) index = 0
          changeSwiper()
        }, 8 * 1000)
      })

      $arraw.on('click', function () {
        if (+new Date() - date < 500) return
        let sindex = $(this).index()
        changeIndex(sindex)
      })

      timer = setInterval(function () {
        index++
        if (index >= $dot.length) index = 0
        changeSwiper()
      }, 8 * 1000)

      detectSwipe(content, () => {
        changeIndex(1)
      }, () => {
        changeIndex(0)
      });

      function detectSwipe(element, onSwipeLeft, onSwipeRight) {
        let startX = 0;

        const getEventX = (event) => {
          return event.touches ? event.touches[0].clientX : event.clientX;
        };

        const handleTouchStart = (e) => {
          startX = getEventX(e);
        };

        const handleTouchMove = (e) => {
          const deltaX = getEventX(e) - startX;
          if (Math.abs(deltaX) > 10 && e.cancelable) {
            e.preventDefault();
          }
        };

        const handleTouchEnd = (e) => {
          const deltaX = getEventX(e.changedTouches ? e.changedTouches[0] : e) - startX;
          if (deltaX > 10) {
            onSwipeRight();
          } else if (deltaX < -10) {
            onSwipeLeft();
          }
        };

        element.addEventListener('touchstart', handleTouchStart);
        element.addEventListener('touchmove', handleTouchMove);
        element.addEventListener('touchend', handleTouchEnd);

        // Add mouse event listeners for PC compatibility
        element.addEventListener('mousedown', handleTouchStart);
        element.addEventListener('mousemove', handleTouchMove);
        element.addEventListener('mouseup', handleTouchEnd);
      }

    }
    expertsSwiper()
  })
</script>
{% schema %}
{
"name": "experts-swiper-new",
"blocks": [
  {
    "name": "item",
    "type": "item",
    "settings": [
      {
        "type": "image_picker",
        "id": "image",
        "label": "头像"
      },
      {
        "type": "text",
        "id": "text",
        "label": "Text"
      },
      {
        "type": "text",
        "id": "text1",
        "label": "Text"
      },
      {
        "type": "text",
        "id": "text2",
        "label": "Text"
      }
    ]
  }
],
"settings": [
  {
    "type": "text",
    "id": "text",
    "label": "标题"
  },
  {
    "type": "text",
    "id": "text1",
    "label": "自定义class"
  }
],
  "presets": [
  {
    "name": "experts-swiper-new",
    "blocks": []
  }
]
}
{% endschema %}